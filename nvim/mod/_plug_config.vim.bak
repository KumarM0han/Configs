

let g:fzf_preview_window = ['right:hidden', 'ctrl-/']
map <leader>ff :call LookFileInCode()<CR>
function! LookFileInCode()
    let curr = expand("%:p")
    " number 8 can be changed based on at what index "code" comes in list
    let pth = "/". join(split(curr, "/")[0:8], '/')
   
    command! -bang ProjectFiles call fzf#vim#files(pth, <bang>0)
    :ProjectFiles
endfunction

nmap <leader>ft :Tags<CR>
nmap <leader>fw :Windows<CR>
nmap <leader>fb :Buffers<CR>

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>1)

function! RipgrepFzf(query, fullscreen)
  "let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let command_fmt = 'rg --sortr --column --line-number --hidden --no-heading --color=always --smart-case %s /home/umacho64/sandbox/box2/main/powerpro/src/dev_src/code -j20'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--disabled', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  let spec = fzf#vim#with_preview(spec, 'down', 'ctrl-/')
  call fzf#vim#grep(initial_command, 1, spec, a:fullscreen)
endfunction
nmap <leader>fa :silent! :RG<CR>

if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \ })
endif
if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \   'initialization_options': {
        \     'cargo': {
        \       'buildScripts': {
        \         'enable': v:true,
        \       },
        \     },
        \     'procMacro': {
        \       'enable': v:true,
        \     },
        \   },
        \ })
endif
